{
	// Place your 驱动源码 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"dev_ioctl": {
		"scope": "c",
		"prefix": "dev_ioctl",
		"body": [
			"/*打开*/",
			"int mycdev_open(struct inode *inode, struct file *file){};",
			"",
			"ssize_t mycdev$1_read(struct file *file, char __user *ubuf,size_t size, loff_t *offs){};",
			"ssize_t mycdev$1_write(struct file *file,const char __user *ubuf,size_t size, loff_t *offs){};",
			"int mycdev$1_close(struct inode *inode, struct file *file){};",
			"long mycdev$1_ioctl(struct file *file, unsigned int cmd, unsigned long args){};",
			"static struct file_operations fops ={.open    = mycdev$1_open,.read    = mycdev$1_read,.write   = mycdev$1_write,.unlocked_ioctl = mycdev$1_ioctl,.release = mycdev$1_close,} "
		],
		"description": "ioctl驱动模板代码",
	},

	"多路复用": {
		"scope": "c",
		"prefix": "dev_epoll",
		"body": [
			"/*打开*/",
			"",
		],
		"description": "ioctl驱动模板代码",
	},
	
	"中断": {
		"scope": "c",
		"prefix": "dev_irq",
		"body": [
			"/*",
			"handler:中断处理函数的指针",
			"",
			"*/",
			"int request_irq(unsigned int irq,irq_handler_t handler,unsigned long flags,const char *name,void *dev){}"
		],
		"description": [
			""
		
		]
	},





}